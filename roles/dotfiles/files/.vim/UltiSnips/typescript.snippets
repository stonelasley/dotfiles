snippet lintd "Disable tslint"
/* tslint:disable */
endsnippet

snippet linte "Enable tslint"
/* tslint:enable */
endsnippet

snippet lintde "Toggle tslint"
/* tslint:disable */
$0
/* tslint:enable */
endsnippet

snippet import "Import module" b
import { $1 } from '$2';
endsnippet

snippet ctr "Class Method" b
constructor() {}
endsnippet

snippet meth "Class Method" b
$1($2): ${3:void} {
	$0 
}
endsnippet

snippet methp "Promise Class Method" b
$1($2): Promise<${3:void}> {
	$0 
}
endsnippet

snippet func "Arrow Function"
${1:()} => $0
endsnippet

snippet async "Async Function"
async ${1:()}: Promise<${2:void}> {
	return await $0
}
endsnippet

snippet subscribe "Observable subscribe"
.subscribe(${1:()} => $2)$0
endsnippet

snippet switch "Switch Statement"
switch($1) {
	case ${2}:
		$0
		break;

	default:
		break;
}
endsnippet

snippet case "Switch Case"
case $0:
	break;
endsnippet

snippet des "Jasmine describe"
describe('$1', () => {
    $0
});
endsnippet

snippet beforeEach "Jasmine beforeEach"
beforeEach(() => {
    $0
});
endsnippet

snippet it "Jasmine it"
it('$1', () => {
    $0
});
endsnippet

snippet isolated "Jasmine isolated test"
describe('$1', () => {
	let classUnderTest: $1;

	beforeEach(() => {
    	classUnderTest = new $1($0);
	});

	it('should initialize', () => {
    	expect(classUnderTest).toBeDefined();	
	});
});
endsnippet
