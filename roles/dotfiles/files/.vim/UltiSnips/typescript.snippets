snippet lintd "Disable tslint"
/* eslint-disable */
endsnippet

snippet linte "Enable tslint"
/* eslint-enable */
endsnippet

snippet lintde "Toggle tslint"
/* eslint-disable */
$0
/* eslint-enable */
endsnippet

snippet import "Import module" b
import { $1 } from '$2';
$0
endsnippet

snippet ctr "Constructor" b
constructor() {
  $0
}
endsnippet

snippet meth "Class Method" b
$1($2): ${3:void} {
	$0 
}
endsnippet

snippet arrow "Arrow Function"
${1:()} => $0
endsnippet

snippet async "Async Function"
async ${1:()}: Promise<${2:void}> {
  return await $0
}
endsnippet

########## RXJS ##########
snippet rx-subscribe "Observable subscribe"
.subscribe(${1:()} => $2)$0
endsnippet

snippet switch "Switch Statement"
switch($1) {
  case ${2}:
    $3
    break;
  $0
  default:
    break;
}
endsnippet

snippet case "Switch Case"
case $0:
	break;
endsnippet

snippet jasdesc "Jasmine describe"
describe('$1', () => {
  $0
});
endsnippet

snippet jasbe "Jasmine beforeEach"
beforeEach(() => {
  $0
});
endsnippet

snippet jasit "Jasmine it"
it('$1', () => {
  $0
});
endsnippet

snippet jasita "Jasmine it async"
it('$1', async () => {
  await $0
});
endsnippet

snippet jassuite "Jasmine isolated test"
describe('$1', () => {
  let classUnderTest: $1;

  beforeEach(() => {
    classUnderTest = new $1($0);
  });

  it('should initialize', () => {
    expect(classUnderTest).toBeDefined();	
  });
});
endsnippet

snippet dbg "Debugger" b
Debugger
endsnippet

snippet clog "Console.log" b
console.log('$1', $2)$0
endsnippet

