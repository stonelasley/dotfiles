extends typescript, html

snippet vstyle "Vue Style Element" b
<style scoped lang="${1:scss}">
  $0
</style>
endsnippet

snippet vcomponent "Vue Component Class " b
import { Vue } from 'vue'
import { Component } from 'vue-property-decorator'
@Component({
  components: {}
})
export default class ${1:MyComponent} extends Vue {
  created() {
    $0
  }
  mounted() {}
}
endsnippet


snippet vfor "Vue loop Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-for="${1:item} in $1s" :key="$1.${2:id}"
endsnippet

snippet vkey "Vue key Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
:key="${1:item}.${2:key}"
endsnippet

snippet vif "Vue if Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-if="$0"
endsnippet

snippet vel "Vue else Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-else
endsnippet

snippet velif "Vue else-if Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-else-if="$0"
endsnippet

snippet vmod "Vue v-model Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-model="$0"
endsnippet

snippet vmode "Vue v-model expanded Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
:value="$1" @input="${2:onInput}"$0
endsnippet

snippet vshow "Vue show" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-show="$0"
endsnippet

snippet von  "Vue on Directive" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
v-on:${1:click}$2="$0"
endsnippet

snippet vclick "Vue click" "re.match('<\s*[a-z,A-Z,-][^>]*>', snip.buffer[snip.line])" ie
@click$1="$0"
endsnippet

snippet vform "Vue Form" b
<VForm id="$1" @submit.prevent="validate().then(submit)">
  $0
</VForm>
endsnippet


# Nuxt
snippet nxcomponent "Nuxt Component Class" b
import { Component, Vue } from 'nuxt-property-decorator'
@Component({
  components: {}
})
export default class ${1:MyComponent} extends Vue {
  asyncData() {}
  fetch(ctx: Context) {}
  created() {
	$0 
  }
  mounted() {}
}
endsnippet
# End Nuxt
# Vuex
snippet vx@Prop "Vuex @Prop" b
@Prop($1) $2: $3
$0
endsnippet

snippet vx@State "Vuex decorated @State" b
@State('$1')
$1!: $0
endsnippet

snippet vx@Getter "Vuex decorated @Getter" b
@Getter('$1')
$1!: $0
endsnippet

snippet vx@Action "Vuex @Action" b
@Action($1_ACTIONS.$2)
$3!: $0
endsnippet

snippet vx@Mutation "Vuex @Mutation" b
@MUTATION($1_MUTATIONS.$2)
$3!: $0
endsnippet

snippet vxnamespace "Vuex namespace helper" b
const { $2 } = namespace('$1')
$0
endsnippet

snippet vxcomponent "Vuex namespace helper" b
<template>
</template>

<script lang="ts">
import { Component, Vue, namespace } from 'nuxt-property-decorator'

const { $2 } = namespace('$1')

@Component
export default class $3Component extends Vue {
  $0
}
</script>
<style scoped lang="scss"></style>
endsnippet
# End Vuex 
# Vueitfy

snippet vfalert "Vuetify v-alert" b
<VAlert type="${1:success}" value="${2:showAlert}">
$0
</VAlert>
endsnippet

endsnippet
snippet vfapp "Vuetify v-app" b
<VApp id="${1:app}">
$0
</VApp>
endsnippet

snippet vfavatar "Vuetify v-avatar" b
<VAvatar color="${1:primary}">
$0
</VAvatar>
endsnippet

snippet vfbadge "Vuetify v-badge" b
<VBadge color="${1:primary}" ${2:right}>
  <template v-slot:badge>${3:badge-val}</template>
  $0
</VBadge>
endsnippet

snippet vftoolbar "Vue Style Element" b
<VToolbar>
  <VToolbarTitle>$1</VToolbarTitle>
   <VSpacer></VSpacer>
   <VToolbarItems>
     <VBtn text>Link 1</VBtn>
     <VBtn text>Link 2</VBtn>
     <VBtn text>Link 3</VBtn>
   </VToolbarItems>
   $0
</VToolbar>
endsnippet

snippet vfcard "Vuetify v-card" b
<VCard>
  <VCardTitle>$1</VCardTitle>
  <VCardText>$2</VCardText>
  <VCardActions>
    $0
  </VCardActions>
</VCard>
endsnippet

snippet vfavatar "Vuetify v-avatar" b
<VAvatar color="${1:primary}">
$0
</VAvatar>
endsnippet

snippet vfbreadcrumbs "Vuetify v-vfbreadcrumbs" b
<VBreadcrumbs :items="${1:items}" divider="${2:/}" />$0
endsnippet

snippet vfbtn "Vuetify v-btn" b
<VBtn @click="${1:onClick}" color="${2:primary}" />
endsnippet

snippet vfbtn:text "Vuetify v-btn text" b
<VBtn @click="${1:onClick}" color="${2:primary}" text />
endsnippet

snippet vfbtn:icon "Vuetify v-btn icon" b
<VBtn @click="${1:onClick}" color="${2:primary}" icon>
  <VIcon>mdi-${3:vuetify}</VIcon>
</VBtn>
endsnippet

snippet vfcol "Vuetify v-column" b
<VCol $1>
$0
</VCol>
endsnippet

snippet vfdatatable "Vuetify v-data-table" b
<VDataTable
  :items="${1:items}"
  :headers="${2:headers}"
>
  $0
</VDataTable>
endsnippet

snippet vfdialog "Vuetify v-dialog" b
<VDialog v-model="dialog" max-width="500px">
  <template v-slot:activator="{ on }">
    <VBtn v-on="on">
      <VIcon>mdi-plus</VIcon>
    </VBtn>
  </template>
  $0
</VDialog>
endsnippet

snippet vfdivider "Vuetify v-divider" b
<VDivider />
endsnippet

snippet vficon "Vuetify v-icon" b
<VIcon>mdi-${1:vuetify}</VIcon>
$0
endsnippet

snippet vfcontainer "Vuetify v-container" b
<VContainer $1>
$0
</VContainer>
endsnippet

snippet vfrow "Vuetify v-row " b
<VRow>
  $0
</VRow>
endsnippet

snippet vfgrid "Vuetify v-grid" b
<VContainer $3>
  <VRow v-align="${1:start}" v-justify="${2:center}" >
    <VCol cols="${4:12}">
      $0
    </VCol>
  </VRow>
</VContainer>
endsnippet

snippet vflist "Vuetify v-list" b
<VList>
  <VListItemGroup>
    <VListItem $0>
      <VListItemIcon>
      </VListItemIcon>
      <VListItemContent>
      	<VListItemTitle></VListItemTitle>
      </VListItemContent>
    </VListItem>
  </VListItemGroup>
</VList>
endsnippet

snippet vfspacer "Vuetify v-spacer" b
<VSpacer />
$0
endsnippet

snippet vfswitch "Vuetify v-switch" b
<VSwitch 
  v-model="formData.$1"
  :label="$t('label.$1')"
/>
$0
endsnippet

# End Vueitfy 

# VeeValidate 

snippet veevalidobserver "VeeValidate ValidationObserver" b
<ValidationObserver v-slot="{ validate, invalid }" slim>
  $0
</ValidationObserver>
endsnippet
# End VeeValidate 

# Personal

snippet actioninprogress "ActionInProgress Decorator" b
$0import { ActionInProgress } from '~/utils/decorators'
loading = false
@ActionInProgress()
endsnippet

snippet textfieldwithvalidation "VeeValidate TextField" b
<TextFieldWithValidation
  name="$1"
  :label="$t('label.$1')"
  v-model="formData.$1"
  rules="required"
/>
endsnippet

# End Personal
