---
- name: link neovim config
  file: src={{ ansible_env.PWD }}/nvim/
        path=~/.config/nvim
        state=link
        force=yes
  tags: [ always ]

- name: Create config bin directory
  ansible.builtin.file:
    path: ~/.local/bin
    state: directory
    mode: '0777'
  tags: [ always ]

- name: test neovim cloned
  stat:
    path: /opt/neovim
  register: neovim
  become: yes
  tags: [ always ]

- name: clone neovim
  git:
    repo: https://github.com/neovim/neovim
    dest: /opt/neovim/
    force: yes
      #version: release-0.5
  when: not neovim.stat.exists
  become: yes
  tags: [ neovim, build ]

- name: set neovim directory permissions
  file:
    path: /opt/neovim
    state: directory
    mode: '777'
    recurse: yes
  when: neovim.stat.exists
  become: yes
  tags: [ always ]

- name: update neovim latest
  shell: 
  args:
    cmd: git checkout . && git clean -fdq && git pull
    chdir: /opt/neovim
  when: neovim.stat.exists
  become: yes
  tags: [ neovim ]

- name: build neovim
  shell: 
  args:
    cmd: make CMAKE_BUILD_TYPE=Release --jobs=4 --silent
    chdir: /opt/neovim
  become: yes
  tags: [ never, build ]

- name: build neovim
  shell: 
  args:
    cmd: make install
    chdir: /opt/neovim
  become: yes
  tags: [ never, build ]

- name: clone packer
  git:
    repo: https://github.com/wbthomason/packer.nvim
    dest: ~/.local/share/nvim/site/pack/packer/start/packer.nvim
    depth: 1
    force: yes
  tags: [ always ]

- name: test omnisharp installed
  stat:
    path: /opt/omnisharp/run
  register: omnisharp
  tags: [ neovim, omnisharp ]

- name: Create a Omnisharp directory
  ansible.builtin.file:
    path: /opt/omnisharp
    state: directory
    mode: '0777'
  when: not omnisharp.stat.exists 
  become: yes
  tags: [ neovim, omnisharp ]

- name: download and install omnisharp
  ansible.builtin.unarchive:
    src: https://github.com/OmniSharp/omnisharp-roslyn/releases/download/{{omnisharp_version}}/omnisharp-osx.zip
    dest: /opt/omnisharp
    remote_src: yes
    mode: u+x
  when: not omnisharp.stat.exists and ansible_distribution == 'MacOSX'
  become: yes
  tags: [ neovim, omnisharp ]

- name: download and install omnisharp
  ansible.builtin.unarchive:
    src: https://github.com/OmniSharp/omnisharp-roslyn/releases/download/{{omnisharp_version}}/omnisharp-linux-x64.zip
    dest: /opt/omnisharp
    remote_src: yes
    mode: u+x
  when: not omnisharp.stat.exists and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: yes
  tags: [ neovim, omnisharp ]

- name: Fix Omnisharp permissions
  file: 
    path: /opt/omnisharp/run
    mode: u+x
  become: yes
  tags: [ neovim, omnisharp ]

- name: Dequarantine omnisharp
  shell: 
  args:
    cmd: find /opt/omnisharp | xargs xattr -r -d com.apple.quarantine
  when: not omnisharp.stat.exists and ansible_distribution == 'MacOSX'
  tags: [ neovim, omnisharp ]

- name: delete sumneko directory
  file:
    path: /opt/sumneko
    state: absent
  become: yes
  tags: [ never, build ]

- name: clone Lua language Server
  git:
    repo: https://github.com/sumneko/lua-language-server
    dest: /opt/sumneko
    depth: 1
    recursive: yes
    track_submodules: yes
    force: yes
  become: yes
  tags: [ never, build ]

- name: set Sumneko directory permissions
  file:
    path: /opt/sumneko
    state: directory
    mode: '777'
    recurse: yes
  become: yes
  tags: [ never, build ]

- name: fix sumneko install executable
  file: 
    path: /opt/sumneko/3rd/luamake/compile/install.sh
    mode: 'u+x'
  become: yes
  tags: [ never, build ]

- name: compile Lua Language Server
  command: ./compile/install.sh
  args:
    chdir: /opt/sumneko/3rd/luamake
  tags: [ never, build ]

- name: build Lua Language Server
  command: ./3rd/luamake/luamake rebuild
  args:
    chdir: /opt/sumneko
  tags: [ never, build ]

- name: reset Neovim directory permissions
  file:
    path: /opt/neovim
    state: directory
    mode: '755'
    recurse: yes
  become: yes
  tags: [ always ]

- name: reset Sumneko directory permissions
  file:
    path: /opt/sumneko
    state: directory
    mode: '755'
    recurse: yes
  become: yes
  tags: [ always ]

- name: reset Omnisharp directory permissions 
  ansible.builtin.file:
    path: /opt/omnisharp
    state: directory
    mode: '0755'
  when: not omnisharp.stat.exists 
  become: yes
  tags: [ always ]

- name: download rust-analyzer
  get_url:
    url: https://github.com/rust-analyzer/rust-analyzer/releases/download/2021-10-04/rust-analyzer-x86_64-apple-darwin.gz
    dest: /tmp/rust-analyzer.gz
  when: ansible_distribution == 'MacOSX'
  tags: [ neovim, rust-analyzer ]

- name: download rust-analyzer
  get_url:
    url: https://github.com/rust-analyzer/rust-analyzer/releases/download/2021-10-04/rust-analyzer-x86_64-unknown-linux-gnu.gz
    dest: /tmp/rust-analyzer.gz
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: [ neovim, rust-analyzer ]

- name: unzip rust-analyzer
  command: gunzip -f rust-analyzer.gz
  args: 
    chdir: /tmp
  tags: [ neovim, rust-analyzer ]

- name: copy rust-analyzer and set permissions
  ansible.builtin.copy:
    src: /tmp/rust-analyzer
    dest: ~/.local/bin/rust-analyzer
    mode: 'u+x'
  tags: [ neovim, rust-analyzer ]

- name: cleanup rust-analyzer
  file:
    path: /tmp/rust-analyzer*
    state: absent
  tags: [ always ]
